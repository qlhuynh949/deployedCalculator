{"version":3,"sources":["components/KeyButton/KeyButton.js","App.js","serviceWorker.js","index.js"],"names":["KeyButton","props","onClick","handleKey","keyItem","App","state","result","num1","num2","num1String","num2String","operator","isCalculated","isOperatorChose","display","handleIncrementCount","setState","count","handleDecrementCount","handleMultiplyBy2Count","handleDivideBy2Count","handleResetCount","handleOperator","value","handleEqual","Number","NaN","handleEnterNumber","handleClear","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfbd98fd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst KeyButton = props => {\r\n  return (\r\n    <button onClick={() => props.handleKey(props.keyItem)}>{props.keyItem}</button>\r\n  )\r\n}\r\n\r\nexport default KeyButton","import React, { Component } from 'react'\r\nimport KeyButton from './components/KeyButton'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    result: 0,\r\n    num1: 0,\r\n    num2: 0,\r\n    num1String: '',\r\n    num2String: '',\r\n    operator: '',\r\n    isCalculated: false,\r\n    isOperatorChose: false,\r\n    display: ''\r\n  }\r\n\r\n  handleIncrementCount = () => {\r\n    this.setState({ count: this.state.count + 1 })\r\n  }\r\n\r\n  handleDecrementCount = () => {\r\n    this.setState({ count: this.state.count - 1 })\r\n  }\r\n\r\n  handleMultiplyBy2Count = () => {\r\n    this.setState({ count: this.state.count * 2 })\r\n  }\r\n\r\n  handleDivideBy2Count = () => {\r\n    this.setState({ count: this.state.count / 2 })\r\n  }\r\n\r\n  handleResetCount = () => {\r\n    this.setState({ count: this.state.count = 0 })\r\n  }\r\n  // write a function that moves count down by 1\r\n\r\n  // write a function that moves count up by multiplying count by 2\r\n\r\n  // write a function that moves count down by dividing count by 2\r\n\r\n  handleOperator = (value) => {\r\n\r\n    this.setState({ isOperatorChose: true })\r\n    this.setState({ operator: value })\r\n  }\r\n\r\n  handleEqual = (value) => {\r\n    let num1 = Number(this.state.num1String)\r\n    let num2 = Number(this.state.num2String)\r\n    let result = 0\r\n    this.state.isCalculated = true\r\n    // Assign value based on the operator\r\n    switch (this.state.operator) {\r\n      case \"+\":\r\n        result = num1 + num2;\r\n        break;\r\n      case \"-\":\r\n        result = num1 - num2;\r\n        break;\r\n      case \"*\":\r\n        result = num1 * num2;\r\n        break;\r\n      case \"/\":\r\n        result = num1 / num2;\r\n        break;\r\n      default:\r\n        result = NaN;\r\n    }\r\n    this.setState({ display: result })\r\n  }\r\n\r\n  handleEnterNumber = (value) => {\r\n    if ((this.state.isOperatorChose === false) && (this.state.isCalculated === false)) {\r\n      this.setState({ num1String: this.state.num1String + value })\r\n\r\n    }\r\n    else\r\n    {\r\n      this.setState({ num2String: this.state.num2String + value })\r\n\r\n    }\r\n  }\r\n  handleClear =()=>\r\n  {\r\n    this.setState({ result: 0 })\r\n    this.setState({ num1: 0 })\r\n    this.setState({ num2: 0 })\r\n    this.setState({ num1String: '' })\r\n    this.setState({ num2String: '' })\r\n    this.setState({ operator: '' })\r\n    this.setState({ isCalculated: false })\r\n    this.setState({ isOperatorChose: false })\r\n    this.setState({ display: '' })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Number 1: {this.state.num1String}</h1>\r\n        <h1>Operator: {this.state.operator}</h1>\r\n        <h1>Number 2: {this.state.num2String}</h1>\r\n        <h1>Result: {this.state.display}</h1>\r\n\r\n        <KeyButton\r\n          keyItem={0}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={1}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={2}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={3}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={4}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={5}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={6}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={7}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={8}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={9}\r\n          handleKey={this.handleEnterNumber} />\r\n        <KeyButton\r\n          keyItem={'+'}\r\n          handleKey={this.handleOperator} />\r\n        <KeyButton\r\n          keyItem={'-'}\r\n          handleKey={this.handleOperator} />\r\n        <KeyButton\r\n          keyItem={'/'}\r\n          handleKey={this.handleOperator} />\r\n        <KeyButton\r\n          keyItem={'*'}\r\n          handleKey={this.handleOperator} />\r\n        <KeyButton\r\n          keyItem={'='}\r\n          handleKey={this.handleEqual} />\r\n        <KeyButton\r\n          keyItem={'Clear'}\r\n          handleKey={this.handleClear} />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}